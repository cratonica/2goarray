// Simple utility to convert a file into a Go byte array

// Clint Caywood, Paul Vollmer

// http://github.com/paulvollmer/2gobytes
package main

import (
	"fmt"
	"io"
	"os"

	"github.com/codegangsta/cli"
)

const (
	Name        = "2gobytes"
	Version     = "0.3.0"
	URL         = "http://github.com/paulvollmer/" + Name
	GeneratedBy = "// File generated by " + Name + " v" + Version + " (" + URL + ")"
)

func main() {
	// the commandline interface
	app := cli.NewApp()
	app.Name = Name
	app.Version = Version
	app.Author = Name + " contributors"
	app.Email = URL + "/graphs/contributors"
	app.Usage = "A simple utility to encode a file into a Go byte array"
	app.Flags = []cli.Flag{
		cli.StringFlag{
			Name:  "package-name, p",
			Value: "main",
			Usage: "name of the package",
		},
		cli.StringFlag{
			Name:  "array-name, a",
			Value: "DATA",
			Usage: "name of the byte array",
		},
		cli.BoolFlag{
			Name:  "no-generated-info, ni",
			Usage: "no 'generated by' info at the first code line",
		},
		cli.BoolFlag{
			Name:  "no-package, np",
			Usage: "no 'package' code",
		},
	}
	app.Action = func(c *cli.Context) {
		if isTerminal() {
			fmt.Println("\nPlease pipe the file you wish to encode into stdin\n")
			return
		}

		// get the cli flags
		packageName := c.String("package-name")
		arrayName := c.String("array-name")
		noGeneratedInfo := c.Bool("no-generated-info")
		noPackage := c.Bool("no-package")

		// print out the code
		if !noGeneratedInfo {
			fmt.Println(GeneratedBy + "\n")
		}
		if !noPackage {
			fmt.Printf("package %s\n\n", packageName)
		}
		fmt.Printf("var %s []byte = []byte{", arrayName)
		buf := make([]byte, 1)
		var err error
		var totalBytes uint64
		var n int
		for n, err = os.Stdin.Read(buf); n > 0 && err == nil; {
			if totalBytes%12 == 0 {
				fmt.Printf("\n\t")
			}
			fmt.Printf("0x%02x, ", buf[0])
			totalBytes++
			n, err = os.Stdin.Read(buf)
		}
		if err != nil && err != io.EOF {
			fmt.Errorf("Error: %v", err)
		}
		fmt.Print("\n}\n\n")

	}
	app.Run(os.Args)
}
