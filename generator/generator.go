package generator

import (
	"bytes"
	"path/filepath"
	"strings"
	"time"
)

const (
	Name        = "2gobytes"
	Version     = "0.4.0"
	URL         = "http://github.com/paulvollmer/2gobytes"
	GeneratedBy = "// File generated by " + Name + " v" + Version + " (" + URL + ")"
)

type Generator struct {
	PackageName     string
	Data            []Var
	GeneratePackage bool
	GenerateInfo    bool
}

func NewGenerator() *Generator {
	g := Generator{}
	g.Data = make([]Var, 0)
	g.GeneratePackage = true
	g.GenerateInfo = true
	return &g
}

// split down to the filename, remove extension and change first char to Uppercase
// http://play.golang.org/p/ic5dxOKdcU
func FilepathToStructName(fPath string) string {
	if fPath == "" {
		return "Data"
	}
	filename := filepath.Base(fPath)
	fileExt := filepath.Ext(filename)
	filenameWithoutExt := filename[0 : len(filename)-len(fileExt)]
	filenameCleaned := strings.Replace(filenameWithoutExt, " ", "_", -1)
	filenameCleaned = strings.Replace(filenameCleaned, "-", "_", -1)
	filenameCleaned = strings.Replace(filenameCleaned, "~", "_", -1)
	filenameCleaned = strings.Replace(filenameCleaned, ".", "_", -1)
	filenameCleaned = strings.Replace(filenameCleaned, ",", "_", -1)
	filenameCleaned = strings.Replace(filenameCleaned, ":", "_", -1)
	filenameCleaned = strings.Replace(filenameCleaned, ":", "_", -1)
	filenameCleaned = strings.Replace(filenameCleaned, ";", "_", -1)
	data := []byte(filenameCleaned)
	upper := bytes.ToUpper([]byte{data[0]})
	rest := data[1:]
	return string(bytes.Join([][]byte{upper, rest}, nil))
}

func (g *Generator) AddFile(fPath string) error {
	tmp := Var{}
	err := tmp.SetDataFromFile(fPath)
	if err != nil {
		return err
	}
	g.Data = append(g.Data, tmp)
	return nil
}

func (g *Generator) AddData(name string, data []byte) {
	tmp := Var{}
	tmp.SetData(name, data)
	g.Data = append(g.Data, tmp)
}

func (g *Generator) GenerateCode() []byte {
	code := ""
	if g.GenerateInfo {
		code += GeneratedBy + "\n"
		code += "// date: " + time.Now().String() + "\n\n"
	}
	if g.GeneratePackage {
		if g.PackageName == "" {
			g.PackageName = "main"
		}
		code += "package " + g.PackageName + "\n\n"
	}

	totalDatasets := len(g.Data)
	for i := 0; i < totalDatasets; i++ {
		code += g.Data[i].GenerateCode()
	}

	if totalDatasets > 1 {
		code += "// Index\n"
		code += "var Index = map[string](*[]byte){\n"
		for i := 0; i < totalDatasets; i++ {
			code += `"` + g.Data[i].File + `": &` + g.Data[i].Name + `,` + "\n"
		}
		code += "}"
	}

	return []byte(code)
}
