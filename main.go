// Simple utility to convert a file into a Go byte array

// Clint Caywood
// Paul Vollmer

// http://github.com/paulvollmer/2gobytes
package main

import (
	"bufio"
	"fmt"
	"io"
	"io/ioutil"
	"os"

	"github.com/codegangsta/cli"
	"github.com/paulvollmer/2gobytes/generator"
)

func main() {
	// the commandline interface
	app := cli.NewApp()
	app.Name = generator.Name
	app.Version = generator.Version
	app.Author = generator.Name + " contributors"
	app.Email = generator.URL + "/graphs/contributors"
	app.Usage = "A simple utility to encode a file into a Go byte array"
	app.Flags = []cli.Flag{
		cli.StringSliceFlag{
			Name:  "input, i",
			Usage: "path to the input json file",
		},
		cli.StringFlag{
			Name:  "output, o",
			Usage: "filepath to write to the generated source",
		},
		cli.Uint64Flag{
			Name:  "perm, P",
			Value: 0644,
			Usage: "file permission of the generated source",
		},
		cli.StringFlag{
			Name:  "package-name, p",
			Value: "main",
			Usage: "name of the package",
		},
		cli.StringFlag{
			Name:  "array-name, a",
			Value: "",
			Usage: "name of the byte array",
		},
		cli.BoolFlag{
			Name:  "no-generated-info, ni",
			Usage: "no 'generated by' info at the first code line",
		},
		cli.BoolFlag{
			Name:  "no-package, np",
			Usage: "no 'package' code",
		},
	}
	app.Action = cliAction
	app.Run(os.Args)
}

func cliAction(c *cli.Context) {
	// create generator object.
	// here we store the generator parameter
	code := generator.NewGenerator()

	// get the cli flag values
	input := c.StringSlice("input")
	output := c.String("output")
	perm := c.Uint64("perm")
	code.PackageName = c.String("package-name")
	varName := c.String("array-name")
	code.GenerateInfo = !c.Bool("no-generated-info")
	code.GeneratePackage = !c.Bool("no-package")

	// check if the input flag was set
	if len(input) != 0 {
		for i := 0; i < len(input); i++ {
			// read the input file
			code.AddFile(input[i])
		}
	} else {
		// read the input from stdin
		if isTerminal() {
			fmt.Print("\nPlease pipe the file you wish to encode into stdin or use the -input flag\n\n")
			os.Exit(1)
		}
		reader := bufio.NewReader(os.Stdin)
		text, err := reader.ReadString('\n')
		if err != nil && err != io.EOF {
			fmt.Printf("Error: %v\n", err)
			os.Exit(1)
		}
		code.AddData(varName, []byte(text))
	}

	// generate the code
	genCode := code.GenerateCode()

	// write or print generated code
	if output != "" {
		fmt.Println("OK, write to file", output)
		ioutil.WriteFile(output, genCode, os.FileMode(perm))
		os.Exit(0)
	}
	fmt.Print(string(genCode))
}
